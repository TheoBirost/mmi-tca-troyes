name: s5_Theo-bi-symfony

on:
  push:
    branches:
      - main
    paths:
      - "ressources/s5/Theo-bi/projets/ci-cd-symfony/**"
  workflow_dispatch: # permet de lancer à la main

defaults:
  run:
    working-directory: ressources/s5/Theo-bi/projets/ci-cd-symfony

jobs:
  ci-symfony:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          coverage: pcov

      - name: Install dependencies
        run: composer install --no-progress --prefer-dist --no-scripts

      - name: Run PHP-CS-Fixer
        run: ./vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: Run PHP lint
        run: find src tests -name "*.php" -exec php -l {} \;

      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse

      - name: Run PHPUnit
        run: ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

      - name: Audit de sécurité
        run: composer audit --format=json --no-interaction
        continue-on-error: true

  build-artifact:
    needs: ci-symfony
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Dockerfile for build
        run: |
          cat > Dockerfile.ci <<'EOF'
          FROM ubuntu:22.04
          RUN apt update && apt upgrade -y
          RUN apt install -y software-properties-common curl unzip
          RUN add-apt-repository -y ppa:ondrej/php && apt update
          RUN apt install -y php8.2 php8.2-cli php8.2-mbstring php8.2-xml php8.2-curl php8.2-zip php8.2-bcmath php8.2-intl
          RUN curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer
          WORKDIR /app
          EOF

      - name: Build Docker image with PHP 8.2
        run: docker build -t symfony-build -f Dockerfile.ci .

      - name: Configure environment variables and build artifact
        run: |
          docker run --rm -v $(pwd)/ressources/s5/Theo-bi/projets/ci-cd-symfony:/app symfony-build bash -c "
            cd /app
            export APP_ENV=prod
            export DATABASE_URL='${DATABASE_URL}'
            composer dump-env prod
            composer install --no-dev --optimize-autoloader --ignore-platform-reqs
            php bin/console asset-map:compile
          "
        env:
          APP_ENV: prod
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Create artifact archive
        run: |
          cd ressources/s5/Theo-bi/projets/ci-cd-symfony
          tar -czvf symfony-artifact-r1.tar.gz \
            --exclude=.git \
            --exclude=node_modules \
            --exclude=var/cache \
            --exclude=var/log \
            --exclude=tests \
            --exclude=.env \
            --exclude=docker \
            --exclude=docker-compose.yml \
            --exclude=README.md \
            --exclude=*.log \
            --exclude=*.gitignore \
            .

      - name: Test artifact
        run: |
          docker run --rm -v $(pwd)/ressources/s5/Theo-bi/projets/ci-cd-symfony:/app symfony-build bash -c "
            cd /app
            mkdir -p /symfony-artifact-r1
            tar -xvf symfony-artifact-r1.tar.gz -C /symfony-artifact-r1/
            cd /symfony-artifact-r1
            timeout 10s php -S 0.0.0.0:8000 -t public/ &
            sleep 5
            curl -f http://localhost:8000/welcome || curl -f http://localhost:8000/ || echo 'Server started successfully'
          "

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: symfony-artifact-r1
          path: ressources/s5/Theo-bi/projets/ci-cd-symfony/symfony-artifact-r1.tar.gz
          retention-days: 30
